<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\ParagraphInterface;

/**
 * @file
 * Style Options Plugins module.
 */

 /**
  * Implements hook_theme().
  */
function style_options_plugins_theme() {
  return [
    'style_options_plugins_background' => [
      'variables' => [
        'css_class' => NULL,
        'color' => NULL,
        'file_url' => NULL,
        'image' => NULL,
        'repeat' => NULL,
        'position' => NULL,
        'size' => NULL,
        'attachement' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_layout_paragraphs_builder_controls().
 *
 * Change the component name in the controls widget to the template suggestion.
 */
function style_options_plugins_preprocess_layout_paragraphs_builder_controls(&$variables) {

  /** @var \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout */
  $layout = $variables['layout_paragraphs_layout'];
  $component = $layout->getComponentByUuid($variables['uuid']);
  $paragraph = $component->getEntity();
  $context_options = \Drupal::service('style_options.discovery')
    ->getContextOptions('paragraphs', $paragraph->bundle());
  foreach (array_keys($context_options) as $option) {
    $context_defition = \Drupal::service('style_options.discovery')
      ->getOptionDefinition($option);
    if ($context_defition['plugin'] == 'template_suggestion') {
      $behavior_settings = $paragraph->getAllBehaviorSettings();
      $style_options = $behavior_settings['style_options'];
      if (isset($style_options[$option])) {
        $key = $style_options[$option]['template_suggestion'];
        $variables['controls']['label']['#value'] = $context_defition['options'][$key]['label'];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter
 */
function style_options_plugins_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['elements']['#paragraph'];
  if (empty($paragraph)) {
    return;
  }
  $behavior_settings = $paragraph->getAllBehaviorSettings();
  if (isset($behavior_settings['style_options'])) {
    $template_suggestions = array_filter($behavior_settings['style_options'], function ($option) {
      return isset($option['template_suggestion']);
    });
    $template_suggestions = array_map(function ($option) {
      return $option['template_suggestion'];
    }, $template_suggestions);
    foreach ($template_suggestions as $template_suggestion) {
      $suggestions[] = 'paragraph__' . $paragraph->bundle() . '__' . $template_suggestion;
    }
    return $suggestions;
  }
}


/**
 * Implements hook_entity_form_mode_alter().
 */
function style_options_plugins_entity_form_mode_alter(&$form_mode, EntityInterface $entity, $context) {
  if (!$entity instanceof ParagraphInterface) {
    return;
  }
  $entity_style_options = $entity->getAllBehaviorSettings()['style_options'] ?? [];
  $style_options_discovery = \Drupal::service('style_options.discovery');
  $options = $style_options_discovery->getContextOptions('paragraphs', $entity->bundle());
  foreach (array_keys($options) as $option_id) {
    $definition = $style_options_discovery->getOptionDefinition($option_id);
    if ($definition['plugin'] == 'component_variation') {
      $request = \Drupal::request();
      if ($request->query->has($option_id)) {
        $form_mode = $definition['options'][$request->query->get($option_id)]['form_mode'];
        return;
      }
      if ($entity_style_options[$option_id]['component_variation']) {
        $form_mode = $definition['options'][$entity_style_options[$option_id]['component_variation']]['form_mode'];
        return;
      }
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function style_options_plugins_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if (!$entity instanceof ParagraphInterface) {
    return;
  }
  $behavior_settings = $entity->getAllBehaviorSettings();
  $style_options = $behavior_settings['style_options'] ?? [];
  foreach ($style_options as $option_id => $style_option) {
    if (isset($style_option['display_mode'])) {
      $definition =  \Drupal::service('style_options.discovery')->getOptionDefinition($option_id);
      if (!empty($definition)) {
        $config = $definition['options'][$style_option['display_mode']];
        $view_mode = $config['view_mode'];
      }
    }
    if (isset($style_option['component_variation'])) {
      $definition =  \Drupal::service('style_options.discovery')->getOptionDefinition($option_id);
      if (!empty($definition)) {
        $config = $definition['options'][$style_option['component_variation']];
        $view_mode = $config['view_mode'] ?? 'default';
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function style_options_plugins_preprocess_paragraph(&$variables) {
  $variables['#attached']['library'][] = 'style_options_plugins/style_options';
}
function style_options_plugins_install() {
  $module_handler = \Drupal::service('module_handler');
  $modules = $module_handler->getModuleList();
  foreach (array_keys($modules) as $weight => $module_name) {
    if ($module_name == 'mercury_editor') {
      continue;
    }
  }
  module_set_weight('style_options_plugins', 0);
}
